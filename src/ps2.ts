// Virtual PS/2

import { WorkerInterface, RuntimeEnvironment } from './env';
// import { IOManager } from './iomgr';

const SCAN_DUMMY = 0x6F;

const scan_table: number[] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00,
    0x2a, 0x1d, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x48, 0x4d, 0x50, 0x00, 0x00, 0x00, 0x00, 0x52, 0x53, 0x00,
    0x0b, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1e, 0x30, 0x2e, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32, 0x31, 0x18,
    0x19, 0x10, 0x13, 0x1f, 0x14, 0x16, 0x2f, 0x11, 0x2d, 0x15, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f,
    0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x6f, 0x6f, 0x6f, 0x00,
    0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

export class PS2 {
    private env: RuntimeEnvironment;
    private o_fifo: number[];
    private i_fifo: number[];

    constructor (env: RuntimeEnvironment) {
        this.env = env;
        this.o_fifo = [];
        this.i_fifo = [];

        env.iomgr.on(0x0060, (_, data) => {
            // TODO:
        }, (_) => {
            if (this.o_fifo.length > 0) {
                return this.o_fifo.shift();
            } else {
                return 0xFF;
            }
        });
        env.iomgr.on(0x0064, (_, data) => this.command(data), (_) => {
            return 0
            | ((this.o_fifo.length > 0) ? 1 : 0)
            | ((this.i_fifo.length > 0) ? 2 : 0)
        });
        env.iomgr.onw(0x64, null, (_) => this.o_fifo.shift() | 0);
    }
    private command(data: number): void {
        switch (data) {
            // TODO:
        }
    }
    onKey(fifo: number[]): void {
        let data: number;
        const code = fifo.shift();
        if (code > 0) {
            const asc = fifo.shift();
            data = scan_table[code];
            if (asc) {
                data |= (asc << 8);
            } else {
                switch (code) {
                    case 0x08:
                    case 0x09:
                    case 0x0D:
                    case 0x1B:
                        data |= (code << 8);
                        break;
                }
            }
            if (data) {
                this.o_fifo.push(data);
                this.env.pic.raiseIRQ(1);    
            }
        } else {
            data = scan_table[-code];
            if (data) {
                this.o_fifo.push(0x80 | data);
                this.env.pic.raiseIRQ(1);
            }
        }
    }
}
